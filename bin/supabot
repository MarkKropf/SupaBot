#!/usr/bin/env ruby
$: << File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'rubygems'
require 'optparse'
require 'yaml'
require 'supabot'

module ConfigModule # just a namespace to shove the config stuff into

  DEFAULT_CONNECTOR_PATH = File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'supabot', 'connectors'))
  DEFAULT_CONFIG_FILE    = File.expand_path(File.join(File.dirname(__FILE__), 'config.yml'))

  def self.config
    options = {}
    options[:botlet_paths] = [File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'supabot', 'botlets'))]
    options[:connectors]   = [{:name => 'Shell', :path => File.join(DEFAULT_CONNECTOR_PATH, 'shell.rb')}]

    OptionParser.new do |opts|
      opts.banner = "Usage: supabot [options]"
      opts.separator ""

      opts.on('-c', '--config FILE', 'Supabot config file.') do |file|
        options[:config] = file
      end

      opts.on('-n', '--name NAME', "This supabot's name (default is Cher)") do |name|
        options[:name] = name
      end

      opts.on('-b', '--botlet-path PATH', 'Add an absolute path that will be searched for botlets') do |path|
        options[:botlet_paths] << File.expand_path(path)
      end

      # not really good if opts contains child arrays or hashes, in that case use a config file
      opts.on('-x', '--connector NAME,[PATH],[OPT1=VAL1,OPT2=VAL2...]', Array, 'Add a connector to load') do |c|
        connector = { :name => c.shift,
                      :path => get_full_connector_path(c.shift),
                      :opts => Hash[c.collect {|pair| pair.split('=') }] }
        options[:connectors] << connector
      end

      opts.on_tail('-h', '--help', 'Display this screen' ) do
        puts opts
        exit
      end
    end.parse!

    options[:config] = DEFAULT_CONFIG_FILE unless options[:config]
    if File.exists?(options[:config])
      config     = YAML.load_file(options[:config])
      config_dir = File.dirname(options[:config])

      config[:connectors]   ||= []
      config[:botlet_paths] ||= []

      config[:connectors].each { |c| c[:path] = get_full_connector_path(c[:path], config_dir) }
      config[:botlet_paths].map! { |p| File.expand_path(p, config_dir) }

      options[:connectors]   |= config[:connectors]
      options[:botlet_paths] |= config[:botlet_paths]
      options[:name]         ||= config[:name]
    end

    options
  end

  def self.get_full_connector_path(path, relative=nil)
    return if path.start_with?("/") # do nothing if this is an absolute path

    if (path.include?(File::SEPARATOR))
      path.prepend("./") unless path.start_with?('.')
      return File.expand_path(path, relative)
    else
      return File.join(DEFAULT_CONNECTOR_PATH, path)
    end
  end
end

options = ConfigModule.config
Supabot::Robot.new(options[:connectors], options[:botlet_paths], options[:name]).run